{"version":3,"mappings":"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","names":["i0","ctx_r13","ctx_r15","ctx_r16","ctx_r18","ctx_r24","ctx_r26","ctx_r28","ctx_r39","ctx_r41","ctx_r43","ctx_r44","ctx_r45","ctx_r51","ctx_r53","ctx_r55","ctx_r57","routes","path","component","constructor","router","route","formBuilder","translate","G","this","window","L","entry","params","subscribe","then_url","then","step","info","includes","ready","ngOnInit","languageFormGroup","group","language","FormControl","Validators","emailFormGroup","email","passwordFormGroup","pw","password","S","password_regexp","confirm_password","validators","passwords_match","oldPasswordFormGroup","ionViewWillEnter","D","page","setTimeout","el","input_email","input_new_password","input_old_password","setFocus","ionViewDidEnter","default_lang","navigator","slice","get","setValue","langs","set_language","set_email","set_password","set_old_password","onDataReady","ionViewDidLeave","save_state","exit","onDataChange","c","valid","value","fg","submit_language","go_fullscreen_on_mobile","navigate","ask_used_before_no","ask_used_before_yes","submit_email","blur_password","input_retype_password","submit_new_password","login_submitted","submit_old_password","connected_dismissed","init_notifications","target","decodeURIComponent","trace","o","location","replace","LoginPage","selectors","LoginPageRoutingModule","RouterModule","LoginPageModule","CommonModule","FormsModule","IonicModule","ReactiveFormsModule","TranslateModule"],"sources":["./src/app/login/login.page.html","./src/app/login/login-routing.module.ts","./src/app/login/login.page.ts","./src/app/login/login.module.ts"],"sourcesContent":["<ion-header>\n  <ion-toolbar style=\"padding-right:11px;\">\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title [innerHtml]=\"'login.-page-title'|translate\"></ion-title>\n    <ion-buttons slot=\"end\">\n\n      <!-- OFFLINE SIGN -->\n      <ng-container *ngIf=\"!window.navigator.onLine\">\n        <ion-icon name=\"cloud-offline-outline\" color=\"grey\"\n          style=\"position: relative; bottom: -1px;\">\n        </ion-icon>\n        <ion-icon name=\"alert-outline\" color=\"grey\">\n        </ion-icon>\n      </ng-container> \n\n      <!-- SYNCING SIGN -->\n      <ion-spinner *ngIf=\"G.show_spinner || !window.navigator.onLine\" name=\"crescent\" color=\"grey\"></ion-spinner>\n      <ion-thumbnail *ngIf=\"!(G.show_spinner || !window.navigator.onLine)\">\n        <ion-img src=\"./assets/topright_icon.png\" ></ion-img>\n      </ion-thumbnail>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n<!--\n\nTODO:\n  - hitting enter should submit\n  - show spinner when busy!\n\n- if no conn. info in local db:\n  - apparently user new on this device. ask if has used vodle before\n    - if no: ask for new conn. info, try to connect as public user\n      - if success, look for private user doc. \n        - if exists, notify that conn. info already in use (used vodle before after all?), try connecting as private user and updating user doc.\n          - if success, done\n          - otherwise, notify error, ask to verify username and password or contact server admin to correct permissions, return to form\n        - otherwise, try generating user\n          - if success, try connecting as private user and generating user doc.\n            - if success, done\n            - otherwise, notify error, ask to verify username and password or contact server admin to correct permissions, return to form\n          - if not, notify error, ask to verify username and password or contact server admin to correct permissions, return to form\n      - otherwise, notify error, ask to verify conn. info, return to form \n    - if yes: ask for old conn. info or recovery file, ...\n-->\n<ion-content *ngIf=\"ready\">\n  <ion-grid>\n\n    <ng-container *ngIf=\"step=='language'||step=='start'\">\n        <ion-item lines=\"none\">\n          <ion-label class=\"ion-text-center\"><h1 style=\"width:100%;\" [innerHtml]=\"'login.welcome'|translate\"></h1></ion-label>\n        </ion-item>\n        <ion-item lines=\"none\">\n          <div style=\"width:100%;\" class=\"ion-text-center\">\n            <img src=\"./assets/topleft_icon.png\" style=\"width:306px;\"/>\n          </div>\n        </ion-item>\n        <ion-item lines=\"none\">\n          <p><br/><br/></p>\n        </ion-item>\n        <ion-item class=\"item-text-wrap\">\n          <h1 class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ask-language'|translate\"></h1>\n        </ion-item>\n        <form [formGroup]=\"languageFormGroup\">\n          <ion-item>\n            <ion-label position=\"floating\" color=\"primary\">\n              <ion-icon name=\"language-outline\"></ion-icon>&nbsp;\n              <span [innerHtml]=\"'language'|translate\"></span>\n            </ion-label>\n            <ion-select #ionSelects interface=\"popover\" formControlName=\"language\" \n                [cancelText]=\"'cancel'|translate\" [okText]=\"'OK'|translate\" \n                (ionChange)=\"set_language()\">\n              <ion-select-option *ngFor=\"let lang of translate.langs\" [value]=\"lang\" [innerHtml]=\"G.S.language_names[lang]\"></ion-select-option>\n            </ion-select>\n          </ion-item>\n        </form>    \n        <ion-item lines=\"none\">\n          <p><br/></p>\n        </ion-item>\n        <ion-item lines=\"none\">\n          <ion-button size=\"larger\" color=\"primary\" slot=\"end\" [disabled]=\"!languageFormGroup.valid\" \n              shape=\"round\"\n              (click)=\"submit_language()\">\n            <span [innerHtml]=\"'next'|translate\"></span>\n            &nbsp;<ion-icon name=\"arrow-forward-outline\"></ion-icon>\n          </ion-button>\n        </ion-item>\n    </ng-container>\n\n    <ng-container *ngIf=\"step=='used_before'\">\n      <ion-item class=\"item-text-wrap\" lines=\"none\">\n        <h1 class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ask-used-before'|translate\"></h1>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <ion-button slot=\"end\" size=\"large\" color=\"primary\" shape=\"round\" \n          (click)=\"ask_used_before_yes()\" [innerHtml]=\"'yes'|translate\">\n        </ion-button>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <ion-button slot=\"end\" size=\"large\" color=\"primary\" shape=\"round\" \n          (click)=\"ask_used_before_no()\" [innerHtml]=\"'no'|translate\">\n        </ion-button>\n      </ion-item>\n    </ng-container>\n\n    <ng-container *ngIf=\"(step=='fresh_email')||(step=='old_email')\">\n      <ion-item class=\"item-text-wrap\" lines=\"none\">\n        <h1 class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"(step=='fresh_email'?'login.ask-fresh-email':'login.ask-old-email')|translate\"></h1>\n      </ion-item>\n      <ion-item class=\"item-text-wrap\">\n          <p class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"(step=='fresh_email'?'login.ask-fresh-email-2':'login.ask-old-email-2')|translate\"></p>\n      </ion-item>\n      <form [formGroup]=\"emailFormGroup\">\n        <ion-grid class=\"ion-no-padding\">\n          <ion-row class=\"ion-no-padding\">\n            <ion-col class=\"ion-no-padding\">\n              <ion-item>\n                <ion-label position=\"floating\" color=\"primary\" [innerHtml]=\"'email'|translate\"></ion-label>\n                <ion-input #input_email\n                  formControlName=\"email\" \n                  type=\"text\" inputmode=\"email\" required autofocus=\"true\"\n                  (ionChange)=\"set_email()\" debounce=\"100\"\n                  (keydown.enter)=\"submit_email()\">\n                </ion-input>\n              </ion-item>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n        <div class=\"validation-errors\">\n        <ng-container *ngFor=\"let validation of G.S.validation_messages.email\">\n          <div class=\"error-message\" \n              *ngIf=\"emailFormGroup.get('email').hasError(validation.type) \n                      && (emailFormGroup.get('email').dirty || emailFormGroup.get('email').touched)\"\n              [innerHtml]=\"validation.message|translate\">\n          </div>\n        </ng-container>\n        </div>  \n      </form>    \n      <ion-item lines=\"none\" class=\"item-text-wrap\">\n        <ion-checkbox slot=\"start\" value=\"false\" [(ngModel)]=\"accept_cookies\"></ion-checkbox>\n        <ion-label [innerHtml]=\"'login.consent-cookies'|translate\"></ion-label>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <ion-button type=\"submit\" size=\"larger\" color=\"primary\" slot=\"end\" \n            [disabled]=\"!emailFormGroup.valid || !accept_cookies\" \n            shape=\"round\"\n            (click)=\"submit_email()\">\n          <span [innerHtml]=\"'next'|translate\"></span>\n          &nbsp;<ion-icon name=\"arrow-forward-outline\"></ion-icon>\n        </ion-button>\n      </ion-item>\n      <ion-item class=\"item-text-wrap\" lines=\"none\">\n        <small><p class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.cookie-banner'|translate\"></p></small>\n      </ion-item>\n    </ng-container>\n\n    <ng-container *ngIf=\"step=='fresh_password'\">\n      <ion-item class=\"item-text-wrap\" lines=\"none\">\n        <h1 class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ask-fresh-password'|translate\"></h1>\n      </ion-item>\n      <ion-item class=\"item-text-wrap\">\n        <p class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ask-fresh-password-2'|translate\"></p>\n      </ion-item>\n      <form [formGroup]=\"passwordFormGroup\">\n        <div formGroupName=\"pw\">\n          <ion-row class=\"ion-no-padding ion-nowrap\">\n            <ion-col class=\"ion-no-padding\">\n              <ion-item>\n                <ion-label position=\"floating\" color=\"primary\" [innerHtml]=\"'password'|translate\"></ion-label>\n                <ion-input #input_new_password\n                  formControlName=\"password\"\n                  clearOnEdit=\"false\" clearInput=\"true\"\n                  [type]=\"showing_password?'text':'password'\" required autofocus=\"true\"\n                  autocomplete=\"off\" autocorrect=\"off\"\n                  (ionChange)=\"set_password()\" debounce=\"100\"\n                  (ionBlur)=\"blur_password()\">\n                </ion-input>\n              </ion-item>\n            </ion-col>\n            <ion-button \n                tabindex=\"-1\" style=\"padding-top: 15px;\" fill=\"clear\" color=\"primary\" \n                (click)=\"showing_password=!showing_password\">\n              <ion-icon [name]=\"showing_password?'eye-off-outline':'eye-outline'\"></ion-icon><!--&nbsp;\n              <span [innerHtml]=\"(showing_password?'hide':'show')|translate\"></span>-->\n            </ion-button>\n          </ion-row>\n          <div class=\"validation-errors\">\n            <ng-container *ngFor=\"let validation of G.S.validation_messages.password\">\n              <div class=\"error-message\" \n                  *ngIf=\"passwordFormGroup.get('pw.password').hasError(validation.type) \n                          && (passwordFormGroup.get('pw.password').dirty || passwordFormGroup.get('pw.password').touched)\"\n                  [innerHtml]=\"validation.message|translate\">\n              </div>\n            </ng-container>\n          </div>\n          <ng-container>\n            <ion-item>\n              <ion-label position=\"floating\" color=\"primary\" [innerHtml]=\"'retype-password'|translate\"></ion-label>\n              <ion-input \n                formControlName=\"confirm_password\" \n                #input_retype_password \n                clearOnEdit=\"false\" clearInput=\"true\"\n                [type]=\"showing_password?'text':'password'\" required\n                autocomplete=\"off\" autocorrect=\"off\"\n                (ionChange)=\"set_password()\" debounce=\"100\"\n                (keydown.enter)=\"submit_new_password()\">\n              </ion-input>\n            </ion-item>\n            <div class=\"validation-errors\">\n              <ng-container *ngFor=\"let validation of G.S.validation_messages.passwords_match\">\n                <div class=\"error-message\" \n                    *ngIf=\"passwordFormGroup.get('pw').hasError('must_match') \n                            && (passwordFormGroup.get('pw.confirm_password').dirty || passwordFormGroup.get('pw.confirm_password').touched)\"\n                    [innerHtml]=\"validation.message|translate\">\n                </div>\n              </ng-container>\n            </div>\n          </ng-container>\n        </div>\n      </form>    \n      <ion-item lines=\"none\">\n        <p><br/><br/></p>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <ion-button size=\"larger\" color=\"primary\" slot=\"end\" [disabled]=\"!passwordFormGroup.get('pw').valid\" \n            shape=\"round\"\n            (click)=\"submit_new_password()\">\n          <span [innerHtml]=\"'next'|translate\"></span>\n          &nbsp;<ion-icon name=\"arrow-forward-outline\"></ion-icon>\n        </ion-button>\n      </ion-item>\n    </ng-container>\n\n    <ng-container *ngIf=\"step=='old_password'\">\n      <ion-item class=\"item-text-wrap\" lines=\"none\">\n        <h1 class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ask-old-password'|translate\"></h1>\n      </ion-item>\n      <form [formGroup]=\"oldPasswordFormGroup\">\n        <div formGroupName=\"pw\">\n          <ion-row class=\"ion-no-padding\">\n            <ion-col class=\"ion-no-padding\">\n              <ion-item>\n                <ion-label position=\"floating\" color=\"primary\" [innerHtml]=\"'password'|translate\"></ion-label>\n                <ion-input #input_old_password\n                  formControlName=\"password\"\n                  clearOnEdit=\"false\" clearInput=\"true\"\n                  [type]=\"showing_password?'text':'password'\" required autofocus=\"true\"\n                  autocomplete=\"off\" autocorrect=\"off\"\n                  (ionChange)=\"set_old_password()\" debounce=\"100\"\n                  (keydown.enter)=\"submit_old_password()\">\n                </ion-input>\n              </ion-item>\n            </ion-col>\n            <ion-button \n                tabindex=\"-1\" style=\"padding-top: 15px;\" fill=\"clear\" color=\"primary\" \n                (click)=\"showing_password=!showing_password\">\n              <ion-icon [name]=\"showing_password?'eye-off-outline':'eye-outline'\"></ion-icon>&nbsp;\n              <span [innerHtml]=\"(showing_password?'hide':'show')|translate\"></span>\n            </ion-button>\n          </ion-row>\n          <div class=\"validation-errors\">\n            <ng-container *ngFor=\"let validation of G.S.validation_messages.password\">\n              <div class=\"error-message\" \n                  *ngIf=\"oldPasswordFormGroup.get('pw.password').hasError(validation.type) \n                          && (oldPasswordFormGroup.get('pw.password').dirty || oldPasswordFormGroup.get('pw.password').touched)\"\n                  [innerHtml]=\"validation.message|translate\">\n              </div>\n            </ng-container>\n          </div>\n        </div>\n      </form>    \n      <ion-item lines=\"none\">\n        <p><br/><br/><br/></p>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <ion-button size=\"larger\" color=\"primary\" slot=\"end\" [disabled]=\"!oldPasswordFormGroup.valid\" \n            shape=\"round\"\n            (click)=\"submit_old_password()\">\n          <span [innerHtml]=\"'next'|translate\"></span>\n          &nbsp;<ion-icon name=\"arrow-forward-outline\"></ion-icon>\n        </ion-button>\n      </ion-item>\n    </ng-container>\n\n    <ng-container *ngIf=\"step=='connected'\">\n      <ion-item class=\"item-text-wrap\" lines=\"none\">\n        <ion-col>\n          <h1 class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ready-to-start'|translate\"></h1>\n          <p class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ready-to-start-detail'|translate\"></p>\n        </ion-col>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <p><br/><br/><br/></p>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <!-- TODO: make this button (and similar buttons on other pages) respond to hitting \"enter\" -->\n        <ion-button size=\"larger\" color=\"primary\" slot=\"end\"\n            shape=\"round\" type=\"submit\"\n            (click)=\"connected_dismissed()\">\n          <span [innerHtml]=\"'start'|translate\"></span>\n          &nbsp;<ion-icon name=\"arrow-forward-outline\"></ion-icon>\n        </ion-button>\n      </ion-item>\n      <ion-item *ngIf=\"terms_expanded\">\n      </ion-item>\n    </ng-container>\n\n  </ion-grid>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { Validators, FormBuilder, FormGroup, FormControl, ValidationErrors, AbstractControl } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IonInput } from '@ionic/angular';\n\nimport { GlobalService } from \"../global.service\";\n\n/*\n- if no conn. info in local db:\n  - apparently user new on this device. ask if has used vodle before\n    - if no: ask for new conn. info, try to connect as public user\n      - if success, look for private user doc. \n        - if exists, notify that conn. info already in use (used vodle before after all?), try connecting as private user and updating user doc.\n          - if success, done\n          - otherwise, notify error, ask to verify username and password or contact server admin to correct permissions, return to form\n        - otherwise, try generating user\n          - if success, try connecting as private user and generating user doc.\n            - if success, done\n            - otherwise, notify error, ask to verify username and password or contact server admin to correct permissions, return to form\n          - if not, notify error, ask to verify username and password or contact server admin to correct permissions, return to form\n      - otherwise, notify error, ask to verify conn. info, return to form \n    - if yes: ask for old conn. info or recovery file, ...\n*/\n\n// PAGE:\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n\n  window = window;\n  \n  // ATTRIBUTES:\n\n  languageFormGroup: FormGroup;\n  emailFormGroup: FormGroup;\n  passwordFormGroup: FormGroup;\n  oldPasswordFormGroup: FormGroup;\n\n  step: string;\n\n  showing_password: boolean;\n  advanced_expanded: boolean;\n  terms_expanded = false;\n  accept_cookies = false;\n\n  @ViewChild('input_email', { static: false }) input_email: IonInput;\n  @ViewChild('input_new_password', { static: false }) input_new_password: IonInput;\n  @ViewChild('input_retype_password', { static: false }) input_retype_password: IonInput;\n  @ViewChild('input_old_password', { static: false }) input_old_password: IonInput;\n\n  // LIFECYCLE:\n\n  ready = false;  \n  then_url: string;\n\n  constructor(      \n      private router: Router,\n      public route: ActivatedRoute,\n      public formBuilder: FormBuilder,\n      public translate: TranslateService,\n      public G: GlobalService) { \n    this.G.L.entry(\"LoginPage.constructor\");\n    this.route.params.subscribe(params => { \n      this.then_url = params['then'];\n      const step = this.step = params['step'] || 'start';\n      this.G.L.info(\"LoginPage going to step\", step, this.then_url);\n      if (['start','language','used_before',\n           'fresh_email','old_email','fresh_password','old_password',\n           'connected'].includes(step)) {\n        this.ready = true;  // here we do not need to wait for DataService since we need no data. \n      }\n    });\n  }\n\n  ngOnInit() {\n    this.G.L.entry(\"LoginPage.ngOnInit\");\n    this.languageFormGroup = this.formBuilder.group({\n      language: new FormControl('', Validators.required),\n    });\n    this.emailFormGroup = this.formBuilder.group({\n      email: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n    });\n    this.passwordFormGroup = this.formBuilder.group({\n      pw: this.formBuilder.group({\n        password: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.minLength(8),\n          Validators.pattern(this.G.S.password_regexp)\n        ])),\n        confirm_password: new FormControl('', Validators.required),\n      }, {\n        validators: [this.G.S.passwords_match]\n      }),\n    });\n    this.oldPasswordFormGroup = this.formBuilder.group({\n      pw: this.formBuilder.group({\n        password: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.minLength(8),\n          Validators.pattern(this.G.S.password_regexp)\n        ])),\n      }),\n    });\n  }\n  \n  ionViewWillEnter() {\n    this.G.L.entry(\"LoginPage.ionViewWillEnter\");\n    this.G.D.page = this;\n    setTimeout(() => {\n      var el = this.input_email||this.input_new_password||this.input_old_password;\n      if (el) {\n        el.setFocus();\n      }\n    }, 300);\n  }\n\n  ionViewDidEnter() {\n    this.G.L.entry(\"LoginPage.ionViewDidEnter\");\n    var default_lang = navigator.language.slice(0,2);\n    this.languageFormGroup.get('language').setValue(\n      this.G.S.language||((this.translate.langs.includes(default_lang))?default_lang:''));\n    // browser might have prefilled fields, so check this:\n    this.set_language();\n    this.set_email();\n    this.set_password();\n    this.set_old_password();\n    if (this.G.D.ready && !this.ready) this.onDataReady();\n  }\n\n  onDataReady() {\n    // called when DataService initialization was slower than view initialization\n    this.G.L.entry(\"LoginPage.onDataReady\");\n    this.ready = true;\n  }\n\n  ionViewDidLeave() {\n    this.G.L.entry(\"LoginPage.ionViewDidLeave\");\n    this.G.D.save_state();\n    this.G.L.exit(\"LoginPage.ionViewDidLeave\");\n  }\n\n  // OTHER HOOKS:\n  \n  // for DataService:\n\n  onDataChange() {\n    // called whenever data stored in database has changed\n    this.G.L.entry(\"LoginPage.onDataChange\");\n  }\n\n  // for form actions:\n\n  set_language() {\n    let c = this.languageFormGroup.get('language');\n    if (c.valid) this.G.S.language = c.value;\n  }\n\n  set_email() {\n    let c = this.emailFormGroup.get('email');\n    if (c.valid) this.G.S.email = c.value; \n  }\n\n  set_password() {\n    let fg = this.passwordFormGroup.get('pw');\n    if (fg.valid) this.G.S.password = fg.get('password').value; \n  }\n\n  set_old_password() {\n    let fg = this.oldPasswordFormGroup.get('pw');\n    if (fg.valid) this.G.S.password = fg.get('password').value; \n  }\n\n  submit_language() {\n    this.G.go_fullscreen_on_mobile();\n    this.router.navigate(['/login/used_before/'+this.then_url]);\n  }\n\n  ask_used_before_no() {\n    this.G.go_fullscreen_on_mobile();\n    this.router.navigate(['/login/fresh_email/'+this.then_url]);\n  }\n\n  ask_used_before_yes() {\n    this.G.go_fullscreen_on_mobile();\n    this.router.navigate(['/login/old_email/'+this.then_url]);\n  }\n\n  submit_email() {\n    if (this.emailFormGroup.get('email').valid) {\n      if (this.step == 'fresh_email') {\n        this.router.navigate(['/login/fresh_password/'+this.then_url]);\n      } else {\n        this.router.navigate(['/login/old_password/'+this.then_url]);\n      }\n    }\n  }\n\n  blur_password() {\n    setTimeout(() => {\n      this.input_retype_password.setFocus();\n    }, 100);\n  }\n\n  submit_new_password() {\n    // TODO: test connection to vodle central. if fails, ask for different server or correct password?\n    if (this.passwordFormGroup.get('pw').valid) {\n      this.G.D.login_submitted();\n    }\n  }\n\n  submit_old_password() {\n    // TODO: test connection to vodle central. if fails, ask for different server or correct password!\n    if (this.oldPasswordFormGroup.get('pw').valid) {\n      this.G.D.login_submitted();\n    }\n  }\n\n  connected_dismissed() {\n    this.G.D.init_notifications(true);\n    const target = \"./#/\"+decodeURIComponent(((!!this.then_url) && !this.then_url.includes('logout')) ? this.then_url : \"\");\n    this.G.L.trace(\"LoginPage redirecting to\", this.then_url, target);\n    if (target != \"\") {\n      // DIRTY FIX to make sure data is loaded properly:\n      window.location.replace(target);\n    } else {\n      // in principle, we would rather want to do this instead:\n      this.router.navigate([target]);\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    LoginPageRoutingModule,\n    TranslateModule.forChild()\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n"],"sourceRoot":"webpack:///","file":"4987.71ce8f6db4d04ff2.js"}