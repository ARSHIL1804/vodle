@startuml

hide methods
hide circle
hide stereotype
skinparam classAttributeIconSize 0

title 
    Entities and Relationships from an abstract viewpoint 
    (compare GLOSSARY.md)
end title

abstract class Note {}
note right
    To edit this diagram, edit its .plantuml 
    source and compile it with plantuml.
    Omitted datatypes are string
end note

abstract class CouchDBServer {
    url
    password
}

package Persons <<Rectangle>> {

    abstract class User {
        *PK email
        *PK password
        ---
        db
        db_from_pid
        db_custom_server_url
        db_custom_password
        FK db_server_url
        FK db_password
        language
        theme
        (and further settings)
    }

    User "n" --> "1" CouchDBServer : uses
    User "1" --> "n" Voter : acts as 

    abstract class Voter {
        *PK vid
        ---
        FK email
        FK password
        FK pid
        ---
        abstains: boolean
        FK vote
    }

}

package Polls <<Rectangle>> {

    Voter "n" --> "1" Poll : belongs to

    abstract class Poll {
        *PK pid
        ---
        type: "winner" | "share"
        language
        title
        description
        url
        due_type
        due_custom: date
        due: date 
        creator
        start_date: date
        ---
        state: "draft" | "running" | "closed"
        ---
        db
        db_from_pid
        db_custom_server_url
        db_custom_password
        FK db_server_url
        FK db_password
        password
        ---
        myvid
        have_seen: boolean
        have_acted: boolean
    }

    Poll "n" --> "1" CouchDBServer : uses
    Poll "1" --> "n" Option : has

    abstract class Option {
        *PK oid
        ---
        FK pid
        name
        description
        url
        ---
        approval_score
        total_ratings_score
        rank: integer
        share
    }

}

package Delegations <<Rectangle>> {

    Voter "1" --> "n" DelegationRequest : makes 

    abstract class DelegationRequest {
        *PK did
        ---
        FK client_vid
        delegate_nickname
        option_spec.type: "+" | "-"
        option_spec.oids: string[]
        ---
        status: "pending" | "agreed" | "declined" | "revoked"
    }

    DelegationRequest "n" --> "n" Option : regards
    DelegationRequest "1" --> "n" DirectDelegation : may lead to 

    abstract class Delegation {
        *PK did
        *PK oid
        ---
        FK client_vid
        FK delegate_vid
    }

    Delegation "n" --> "1" Option : regards
    Delegation "n" --> "1" Voter : delegates to

    abstract class DirectDelegation {}
    DirectDelegation --> Delegation : is a form of

    DirectDelegation "n" --> "1" IndirectDelegation : lead to 
    DirectDelegation "n" --> "1" EffectiveDelegation : lead to 

    abstract class IndirectDelegation {}
    IndirectDelegation --> Delegation : is a form of

    abstract class EffectiveDelegation {}
    EffectiveDelegation --> Delegation : is a form of

}

package Ratings <<Rectangle>> {

    abstract class Rating {
        *PK vid
        *PK oid
        ---
        value: number (0...100)
    }

    Rating "n" --> "1" Option : evaluates

    Voter "1" --> "n" OwnRating : specifies 

    abstract class OwnRating {}
    OwnRating --> Rating : is a form of

    EffectiveDelegation "1" --> "1" ProxyRating : leads to

    OwnRating "1" --> "n" ProxyRating : may be used as

    abstract class ProxyRating {}
    ProxyRating --> Rating : is a form of

    ProxyRating "n" --> "1" Voter : is used for 

    abstract class EffectiveRating {}
    EffectiveRating --> Rating : is a form of

    EffectiveRating "1" --> "n" ProxyRating : is based on

}

    abstract class Approval {
        *PK vid
        *PK oid
        ---
        value: boolean
    }

    Approval "n" --> "1" Voter : is calculated for
    Approval "n" --> "1" Option : regards

    Voter "n" --> "1" Option : has her share go to

@enduml

